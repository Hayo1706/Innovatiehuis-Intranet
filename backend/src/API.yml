openapi: 3.0.3
info:
  description: This is the interactive documentation for the Innovatiehuis Intranet RESTful API
  version: "0.0.0"
  title: Innovatieplatform REST API

servers:
  - url: http://127.0.0.1:5000/api



  # Paths supported by the server application
paths:
# ============================================PROJECTS==================================================
  /projects:
    get:
      operationId: src.endpoints.projects.read_all
      tags:
        - Projects
      summary: Read the entire list of projects
      responses:
        200:
          description: Successfully read projects list operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    post:
      operationId: src.endpoints.projects.create
      tags:
        - Projects
      summary: Create a new project
      responses:
        200:
          description: Successfully created new project
  /projects/{project_id}:
    get:
      operationId: src.endpoints.projects.read_one
      tags:
        - Projects
      summary: Read one project
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully read project operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      operationId: src.endpoints.projects.update
      tags:
        - Projects
      summary: Update a value of project
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_name:
                  type: string
                description:
                  type: string

      responses:
        200:
          description: Project updated
    delete:
      operationId: src.endpoints.projects.delete
      tags:
        - Projects
      summary: Deletes the specified project
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Project deleted
  /projects/{project_id}/archive:
    put:
      operationId: src.endpoints.projects.update_archive
      tags:
        - Projects
      summary: Archive or de-archive a project
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Project archive status updated

  /projects/{project_id}/parents:
    get:
      operationId: src.endpoints.projects.read_parents
      tags:
        - Projects
      summary: Read all projects marked as parent of a specific project
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully read all parent projects for this project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /projects/{project_id}/parents/{parent_id}:
    post:
      operationId: src.endpoints.projects.add_parent
      tags:
        - Projects
      summary: Read all projects marked as parent of a specific project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/parent_id'
      responses:
        200:
          description: Successfully assigned parent project to given project
    delete:
      operationId: src.endpoints.projects.remove_parent
      tags:
        - Projects
      summary: Read all projects marked as parent of a specific project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/parent_id'
      responses:
        200:
          description: Successfully broke parent-child relation
  /projects/{project_id}/children:
    get:
      operationId: src.endpoints.projects.read_children
      tags:
        - Projects
      summary: Read all projects marked as child of a specific project
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully read child projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /projects/{project_id}/children/{child_id}:
    post:
      operationId: src.endpoints.projects.add_child
      tags:
        - Projects
      summary: Mark a project as child to the given project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/child_id'
      responses:
        200:
          description: Successfully marked project as child
    delete:
      operationId: src.endpoints.projects.remove_child
      tags:
        - Projects
      summary: Remove a project as child from a given project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/child_id'
      responses:
        200:
          description: Successfully broke parent-child relation
  /projects/{project_id}/children/{child_id}/shared_files:
    put:
      operationId: src.endpoints.projects.update_shared_files
      tags:
        - Projects
        - Files
      summary: Update what files are shared from parent project to child project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/child_id'
      responses:
        200:
          description: Successfully updated shared files

  /projects/{project_id}/users:
    get:
      operationId: src.endpoints.projects.read_users
      tags:
        - Projects
        - Users
      summary: Get IDs of all users assigned to this project, as well as the time they last accessed it
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully read users assigned to this project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: src.endpoints.projects.update_users
      tags:
        - Projects
        - Users
      summary: Change the users in this project by supplying a list of user IDs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDs'
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully updated list of users assigned to this project
  /projects/{project_id}/users/{user_id}:
    post:
      operationId: src.endpoints.projects.add_user
      tags:
        - Projects
        - Users
      summary: Add a user to a project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully added user to project
    delete:
      operationId: src.endpoints.projects.remove_user
      tags:
      - Projects
      - Users
      summary: Remove a user from a project
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully removed user from project
  /projects/{project_id}/users/last_seen:
    patch:
      operationId: src.endpoints.projects.update_last_seen
      tags:
        - Projects
        - Users
      summary: Lets the data model know when a user has last accessed the contents of a Project.
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully updated the time when the given User last saw this Project.

  /projects/{project_id}/announcements:
    get:
      operationId: src.endpoints.projects.read_announcements
      tags:
      - Projects
      - Announcements
      summary: Get all announcements from project
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully retrieved announcements from project
        404:
          description: Specified project not found
    post:
      operationId: src.endpoints.projects.add_announcement
      tags:
      - Projects
      - Announcements
      summary: Post announcements in project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: Successfully posted announcement to project

# ========================================FILES/FOLDERS============================================

  /projects/{project_id}/files:
    get:
      operationId: src.endpoints.files.get_files_in_path
      tags:
        - Files
      summary: Returns file(s) in directory
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Successfully retrieved files at given path
    post:
      operationId: src.endpoints.files.request_to_upload_file
      tags:
        - Files
      summary: Upload file(s) in directory
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
        - $ref: '#/components/parameters/conf'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
      responses:
        200:
          description: Succesfully uploaded file
        409:
          description: A file with the same name already exists
        400:
          description: Failed to upload files
    put:
      operationId: src.endpoints.files.move_file
      tags:
        - Files
      summary: Move file to another directory
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
      responses:
        200:
          description: Successfully moved file
  /projects/{project_id}/file:
    get:
      operationId: src.endpoints.files.download_file
      tags:
        - Files
      summary: Download file
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Downloaded file
    delete:
      operationId: src.endpoints.files.delete_file
      tags:
        - Files
      summary: Delete file(s) in directory
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Succesfully deleted file
    put:
      operationId: src.endpoints.files.rename_file
      tags:
        - Files
      summary: Update file
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string

      responses:
        200:
          description: Successfully updated file

  /projects/{project_id}/folders:
    get:
      operationId: src.endpoints.folders.get_folders_in_path
      tags:
        - Folders
      summary: Returns folder(s) in directory
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Successfully retrieved folders at given path
    put:
      operationId: src.endpoints.folders.update_dir
      tags:
        - Folders
      summary: Move folder to another directory
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                rename:
                  type: string
      responses:
        200:
          description: Successfully moved folder
        400:
          description: Failed to move folder
    delete:
      operationId: src.endpoints.folders.delete_dir
      tags:
        - Folders
      summary: Delete folder and file(s) in directory
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
        - $ref: '#/components/parameters/conf'
      responses:
        200:
          description: Succesfully delete folder
        400:
          description: Failed to delete folder
        409: 
          description: There are files or folders in this folder, requires confirmation
    post:
      operationId: src.endpoints.folders.create_dir
      tags:
        - Folders
      summary: Place new folder directory
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Succesfully add new folder


# ================================ANNOUNCEMENTS===================================
  /announcements:
    get:
      operationId: src.endpoints.announcements.read_global
      tags:
        - Global Announcements
      summary: Reads all global announcements (those not tied to any project)
      responses:
        200:
          description: Successfully retreieved global announcements
    post:
      operationId: src.endpoints.announcements.create_global
      tags:
        - Global Announcements
      summary: Create a new global announcement (not tied to any project)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      responses:
        200:
          description: Successfully posted announcement to project
  /announcements/{announcement_id}:
    get:
      operationId: src.endpoints.announcements.read_one
      tags:
        - Announcements
      summary: Reads a specific announcement
      parameters:
        - $ref: '#/components/parameters/announcement_id'
      responses:
        200:
          description: Successfully retrieved single announcement
    put:
      operationId: src.endpoints.announcements.update
      tags:
        - Announcements
      summary: Update title and/or content of a specific announcement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      parameters:
        - $ref: '#/components/parameters/announcement_id'
      responses:
        200:
          description: Successfully posted announcement to project
    delete:
      operationId: src.endpoints.announcements.delete
      tags:
        - Announcements
      summary: Deletes specific announcement
      parameters:
        - $ref: '#/components/parameters/announcement_id'
      responses:
        200:
          description: Successfully removed announcement
  /announcements/{announcement_id}/replies:
    get:
      operationId: src.endpoints.announcements.read_replies
      tags:
        - Announcements
        - Replies
      summary: Get all replies to an announcement
      parameters:
        - $ref: '#/components/parameters/announcement_id'
      responses:
        200:
          description: Successfully retrieved replies to announcements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      operationId: src.endpoints.announcements.add_reply
      tags:
        - Announcements
        - Replies
      summary: Post reply to an announcement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
      parameters:
        - $ref: '#/components/parameters/announcement_id'
      responses:
        200:
          description: Successfully posted reply to announcement


# =========================================REPLIES===============================================
  /replies/{reply_id}:
    put:
      operationId: src.endpoints.replies.update
      tags:
        - Replies
      summary: Edit reply message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      parameters:
        - $ref: '#/components/parameters/reply_id'
      responses:
        200:
          description: Successfully edited reply content
    delete:
      operationId: src.endpoints.replies.delete
      tags:
        - Replies
      summary: Delete reply
      parameters:
        - $ref: '#/components/parameters/reply_id'
      responses:
        200:
          description: Successfully deleted reply


# ==============================================USERS==================================================
  /users:
    get:
      operationId: src.endpoints.users.read_all
      tags:
        - Users
      summary: Gets all users
      parameters:
        - in: query
          name: order_column
          schema:
            type: string
          required: false
        - in: query
          name: order_direction
          schema:
            type: string
          required: false
      responses:
        200:
          description: Successfully read all users
    post:
      operationId: src.endpoints.users.create
      tags:
        - Users
      summary: Add user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Successfully added user
  /users/{user_id}:
    get:
      operationId: src.endpoints.users.read_one
      tags:
        - Users
      summary: Get specified user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully read user
    put:
      operationId: src.endpoints.users.update
      tags:
        - Users
      summary: Edit user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User' # BUT NOT PASSWORD_HASH
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully edited user
        403:
          description: Request denied due to lack of permissions
    delete:
      operationId: src.endpoints.users.delete
      tags:
        - Users
      summary: Delete specified user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully deleted user

  /users/{user_id}/screening/{screening_status}:
    patch:
      operationId: src.endpoints.users.update_screening
      tags:
        - Users
      summary: Change screening status of specified user
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/screening_status'
      responses:
        200:
          description: Successfully updated password
        403:
          description: Request denied due to lack of permissions
  /users/{user_id}/role/{role_id}:
    patch:
      operationId: src.endpoints.users.update_role
      tags:
        - Users
        - Roles
      summary: Change screening status of specified user
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/role_id'
      responses:
        200:
          description: Successfully updated password
        403:
          description: Request denied due to lack of permissions
  /users/{user_id}/password:
    patch:
      operationId: src.endpoints.users.update_password
      tags:
        - Users
      summary: Change password of specified user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully updated password
        403:
          description: Request denied due to lack of permissions
        404:
          description: Specified user not found

  /users/{user_id}/projects:
    get:
      operationId: src.endpoints.users.read_projects
      tags:
        - Users
      summary: Get projects of specified user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully read user projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Specified user not found
    post:
      operationId: src.endpoints.users.add_project
      tags:
        - Projects
      summary: Assign a new project to a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Successfully assigned project to the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Specified user or project not found


# ========================================AUTH/LOGOUT==================================================
  /auth:
    post:
      operationId: src.endpoints.auth.login
      tags:
        - Authentication
      summary: Request JSON Web Token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User is authenticated and receives a JSON Web Token
          content:
            'application/json':
              schema:
                type: string
        401:
          description: Unauthorized
  /auth/password:
    put:
      operationId: src.endpoints.auth.change_password
      tags:
        - Authentication
      summary: Request JSON Web Token
      parameters:
        - in: query
          name: resettoken
          schema:
            type: string
          required: true
      responses:
        200:
          description: User is authenticated and receives a JSON Web Token
          content:
            'application/json':
              schema:
                type: string
        401:
          description: Unauthorized
  /auth/logout:
    post:
      operationId: src.endpoints.auth.logout
      tags:
        - Authentication
      summary: User requests server to clear the HTTP-only cookie holding the JSON Web Token
      responses:
        200:
          description: Server sends a HTTP request that clears the HTTP-only cookie
          content:
            'application/json':
              schema:
                type: string


#=========================================================================================================
components:
  parameters:
    project_id:
      in: path
      name: project_id
      required: true
      schema:
        type: string
      description: The ID number of a project
    parent_id:
      in: path
      name: parent_id
      required: true
      schema:
        type: string
      description: The ID number of a parent project
    child_id:
      in: path
      name: child_id
      required: true
      schema:
        type: string
      description: The ID number of a child project
    user_id:
      in: path
      name: user_id
      required: true
      schema:
        type: string
      description: The ID number of a user
    announcement_id:
      in: path
      name: announcement_id
      required: true
      schema:
        type: string
      description: The ID number of an announcement
    reply_id:
      in: path
      name: reply_id
      required: true
      schema:
        type: string
      description: The ID number of a reply
    role_id:
      in: path
      name: role_id
      required: true
      schema:
        type: string
      description: The ID number of a role
    screening_status:
      in: path
      name: screening_status
      required: true
      schema:
        type: string
      description: Number representing screening status; 0 = unscreened, 1 = in progress, 2 = screened
    path:
      in: query
      name: path
      required: true
      schema:
        type: string
      description: The path to be used
    conf:
      in: query
      name: conf
      required: false
      schema:
        type: string
      description: Confirmation for an action

  schemas:
    Project:
      type: object
      properties:
        projectid:
          type: integer
        project_name:
          type: string
        is_archived:
          type: boolean
        create:
          type: string
        last_updated:
          type: string
    User:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        roleid:
          type: integer
        screening_status:
          type: integer
        password_hash:
          type: string
    Announcement:
      type: object
      properties:
        content:
          type: string
        title:
          type: string
    Files:
      type: object
      required:
        - files
      properties:
        files:
          type: array
    IDs:
      type: object
      properties:
        IDs:
          type: array
