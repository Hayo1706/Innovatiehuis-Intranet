openapi: 3.0.3
info:
  description: This is the openapi file that goes with our server code
  version: "1.0.0"
  title: Swagger, Innovatieplatform

servers:
  - url: http://127.0.0.1:5000/api



  # Paths supported by the server application
paths:
  /projects:
    get:
      operationId: src.routes.projects.read_all
      tags:
        - Project
      summary: Read the entire list of projects
      responses:
        200:
          description: Successfully read projects list operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /projects/{id}:
    get:
      operationId: src.routes.projects.read_one
      tags:
        - Project
      summary: Read one project
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully read project operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      operationId: src.routes.projects.update
      tags:
        - Project
      summary: Update a value of project
      parameters:
        - $ref: '#/components/parameters/id'
        - in: query
          name: is_archived
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: Project updated
    delete:
      operationId: src.routes.projects.delete
      tags:
        - Project
      summary: Deletes the specified project
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Project deleted
  /projects/{id}/parents:
    get:
      operationId: src.routes.projects.read_parents
      tags:
        - Project
      summary: Read all projects marked as parent of a specific project
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully read project operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /projects/{id}/children:
    get:
      operationId: src.routes.projects.read_children
      tags:
        - Project
      summary: Read all projects marked as child of a specific project
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully read project operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

#  /projects/upload:
#    post:
#      operationId: src.routes.files.uploadFiles
#      tags:
#        - Files
#      summary: Uploads file(s) to filestorage
#      requestBody:
#        required: true
#        content:
#          multipart/form-data:
#            schema:
#              type: object
#              properties:
#                files:
#                  type: array
#      responses:
#        200:
#          description: Successfully uploaded a file

  /projects/{id}/files:
    get:
      operationId: src.routes.files.getFilesInPath
      tags:
        - Files
      summary: Returns file(s) in directory
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Successfully retrieved files at given path
    post:
      operationId: src.routes.files.uploadFiles
      tags:
        - Files
      summary: Upload file(s) in directory
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
      responses:
        200:
          description: Succesfully uploaded file
#    put:
#      operationId: src.routes.files.???????
#      tags:
#        - Files
#      summary: Move file to another directory
#      parameters:
#        - $ref: '#/components/parameters/id'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                from:
#                  type: string
#                to:
#                  type: string
#      responses:
#        200:
#          description: Successfully moved file
  /projects/{id}/file:
    get:
      operationId: src.routes.files.downloadFile
      tags:
        - Files
      summary: Download file
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Downloaded file
    delete:
      operationId: src.routes.files.deleteFile
      tags:
        - Files
      summary: Delete file(s) in directory
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Succesfully deleted file
    put:
      operationId: src.routes.files.renameFile
      tags:
        - Files
      summary: Update file
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string

      responses:
        200:
          description: Successfully updated file

  /projects/{id}/folders:
    get:
      operationId: src.routes.folders.getFoldersInPath
      tags:
        - Folders
      summary: Returns folder(s) in directory
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Successfully retrieved folders at given path
    put:
      operationId: src.routes.folders.checkFolderPutRequest
      tags:
        - Folders
      summary: Move folder to another directory
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                rename:
                  type: string
      responses:
        200:
          description: Successfully moved folder
        400:
          description: Failed to move folder
    delete:
      operationId: src.routes.folders.deleteDir
      tags:
        - Folders
      summary: Delete folder and file(s) in directory
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      responses:
        200:
          description: Succesfully delete folder
    post:
      operationId: src.routes.folders.createDirFromRequest
      tags:
        - Folders
      summary: Place new folder directory
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Succesfully add new folder

  /projects/{id}/announcements:
    get:
      operationId: src.routes.announcements.read_all
      tags:
        - Announcements
      summary: Get all announcements from project
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully retrieved announcements from project
        404:
          description: Specified project not found
    post:
      operationId: src.routes.announcements.post
      tags:
        - Announcements
      summary: Post announcements in project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  content:
                    type: string
                  title:
                    type: string
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully posted announcement to project
  /announcements:
    get:
      operationId: src.routes.announcements.read_global_announcements
      tags:
        - Global Announcements
      summary: Reads all global announcements (=those not tied to a project)
      responses:
        200:
          description: Successfully retreieved global announcements
    post:
      operationId: src.routes.announcements.post_global
      tags:
        - Global Announcements
      summary: Post announcements in global
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
      responses:
        200:
          description: Successfully posted announcement to project
  /announcements/{id}:
    delete:
      operationId: src.routes.announcements.delete
      tags:
        - Announcements
      summary: Deletes announcement with id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully removed announcement
    put:
      operationId: src.routes.announcements.edit
      tags:
        - Announcements
      summary: Update announcements title/content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully posted announcement to project
  /announcements/{id}/replies:
    get:
      operationId: src.routes.replies.read_all
      tags:
        - Replies
      summary: Get all replies to an announcement
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully retrieved replies to announcements
    post:
      operationId: src.routes.replies.post
      tags:
        - Replies
      summary: Post reply to announcement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully posted reply to announcement
  /replies/{id}:
    put:
      operationId: src.routes.replies.edit
      tags:
        - Replies
      summary: Edit reply message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully edited reply content
    delete:
      operationId: src.routes.replies.delete
      tags:
        - Replies
      summary: Delete reply
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully deleted reply

  /users:
    get:
      operationId: src.routes.users.read_all
      tags:
        - Users
      summary: Gets all users
      responses:
        200:
          description: Successfully read all users
    post:
      operationId: src.routes.users.post
      tags:
        - Users
      summary: Add user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                roleid:
                  type: integer
                screeningstatus:
                  type: integer
      responses:
        200:
          description: Successfully added user
  /users/{id}:
    get:
      operationId: src.routes.users.read_one
      tags:
        - Users
      summary: Get specified user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully read user
    delete:
      operationId: src.routes.users.delete
      tags:
        - Users
      summary: Delete specified user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully delete user
    put:
      operationId: src.routes.users.put
      tags:
        - Users
      summary: Edit user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                roleid:
                  type: integer
                screeningstatus:
                  type: integer
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully edited user

  /users/{id}/projects:
    get:
      operationId: src.routes.users.read_user_projects
      tags:
        - Users
      summary: Get projects of specified user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Successfully read user projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Specified user not found
  /auth:
    post:
      operationId: src.services.JWT.generate_token
      tags:
        - Authorization
      summary: User requests token
#      security: [
#        {}
#      ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: JWT token
          content:
            'application/json':
              schema:
                type: string
        401:
          description: Unauthorized
  /logout:
    post:
      operationId: src.services.JWT.logout
      tags:
        - Authorization
      summary: User logs out and removes cookies
#      security: [
#        {}
#      ]
      responses:
        200:
          description: Unset cookie token
          content:
            'application/json':
              schema:
                type: string

components:
  parameters:
    id:
      in: path
      name: id
      required: true
      description: The id of the object
      schema:
        type: string
    path:
      in: query
      name: path
      schema:
        type: string
      description: The path to be used

  schemas:
    Project:
      type: object
      properties:
        projectid:
          type: integer
        project_name:
          type: string
        is_archived:
          type: boolean
        create:
          type: string
        last_updated:
          type: string
    Files:
      type: object
      required:
        - files
      properties:
        files:
          type: array
#  securitySchemes:
#    oAuthSecurity: # <---- arbitrary name
#      type: oauth2
#      description: This API uses OAuth 2 with the password grant flow.
#      x-tokenInfoFunc: src.services.JWT.decode_token
#      flows:
#        password: # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
#          tokenUrl: /api/auth
#          scopes:
#            {}
#
#
## Step 2 - apply security globally...
#security:
#  - oAuthSecurity: []